@page "/fetchdata"
@using System.Text.Json
@using StaticBlazorApp.Models

@inject HttpClient httpClient

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the OpenWeather Api.</p>

@if (weathers?.daily is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (Day)</th>
                <th>Humidity</th>
                <th>Feels Like</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weather in weathers.daily)
            {
                <tr>
                    <td>@UnixTimeToDateTime(weather.dt)</td>
                    <td>@weather.temp?.day</td>
                    <td>@weather.humidity</td>
                    <td>@weather.feels_like?.day</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string? apiUrl;
    private ResponseWeather? weathers;

    protected override async Task OnInitializedAsync()
    {
        apiUrl = @"https://api.openweathermap.org/data/2.5/onecall?lat=50.447731&lon=30.542721&exclude=current,minutely,hourly,alerts&units=metric&appid=20a8059d4ab77345b7568f41e972358a";

        weathers = await GetWeather();
    }

    protected async Task<ResponseWeather?> GetWeather()
    {
        var query = apiUrl;
        var response = await httpClient.GetAsync(query);
        if (!response.IsSuccessStatusCode)
            return null;

        return await response.Content.ReadFromJsonAsync<ResponseWeather>();
    }

    protected DateOnly UnixTimeToDateTime(long unixtime)
    {
        var dtDateTime = new DateTime(1970, 1, 1).AddSeconds(unixtime);
        return DateOnly.FromDateTime(dtDateTime);
    }
}