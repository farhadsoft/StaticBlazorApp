@page "/fetchdata"
@using System.Text.Json
@using StaticBlazorApp.Models
@using BrowserInterop.Extensions
@using BrowserInterop.Geolocation

@inject HttpClient httpClient
@inject IJSRuntime jsRuntime

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the OpenWeather Api.</p>

@if (weathers?.daily is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (Day)</th>
                <th>Temp. (Night)</th>
                <th>Humidity</th>
                <th>Feels Like</th>
                <th>Sun Rise</th>
                <th>Sun Set</th>
                <th>Moon Phase</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var weather in weathers.daily)
            {
                <tr>
                    <td>@UnixTimeToDate(weather.dt).ToString("dd.MM.yyyy")</td>
                    <td><p class="wi wi-owm-day-@weather.weather[0].id" title="@weather.weather[0].description"></p> @weather.temp?.day</td>
                    <td><p class="wi wi-owm-night-@weather.weather[0].id" title="@weather.weather[0].description"></p> @weather.temp?.night</td>
                    <td>@weather.humidity %</td>
                    <td>@weather.feels_like?.day</td>
                    <td>@UnixTimeToTime(weather.sunrise + weathers.timezone_offset).ToString("HH:mm")</td>
                    <td>@UnixTimeToTime(weather.sunset + weathers.timezone_offset).ToString("HH:mm")</td>
                    <td>@weather.moon_phase</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ResponseWeather? weathers;
    private string appid = "20a8059d4ab77345b7568f41e972358a";

    private WindowNavigatorGeolocation? geolocationWrapper;
    private GeolocationResult? currentPosition;

    protected override async Task OnInitializedAsync()
    {
        var window = await jsRuntime.Window();
        var navigator = await window.Navigator();
        geolocationWrapper = navigator.Geolocation;
        currentPosition = await geolocationWrapper.GetCurrentPosition();
        if (currentPosition is not null)
        {
            weathers = await GetWeather(currentPosition.Location.Coords.Latitude.ToString(), currentPosition.Location.Coords.Longitude.ToString());
        }
    }

    protected async Task<ResponseWeather?> GetWeather(string lat, string lon)
    {
        var query = $"https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=current,minutely,hourly,alerts&units=metric&appid={appid}";
        var response = await httpClient.GetAsync(query);
        if (!response.IsSuccessStatusCode)
            return null;

        return await response.Content.ReadFromJsonAsync<ResponseWeather>();
    }

    protected DateOnly UnixTimeToDate(long unixtime)
    {
        var dtDateTime = new DateTime(1970, 1, 1).AddSeconds(unixtime);
        return DateOnly.FromDateTime(dtDateTime);
    }

    protected TimeOnly UnixTimeToTime(long unixtime)
    {
        var dtDateTime = new DateTime(1970, 1, 1).AddSeconds(unixtime);
        return TimeOnly.FromDateTime(dtDateTime);
    }
}